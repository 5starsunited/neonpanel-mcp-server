"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const keepa_client_1 = require("./keepa-client");
const tools_1 = require("./tools");
const app = (0, express_1.default)();
// Middleware
app.use((0, cors_1.default)());
app.use(express_1.default.json());
// Error handling middleware
const asyncHandler = (fn) => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};
// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});
// Keepa API endpoints - user provides API key in request body
app.post('/api/keepa/product-lookup', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.lookupProduct(tools_1.ProductLookupSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/batch-product-lookup', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.batchLookupProducts(tools_1.BatchProductLookupSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/search-deals', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.searchDeals(tools_1.DealSearchSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/seller-lookup', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.lookupSeller(tools_1.SellerLookupSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/best-sellers', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.getBestSellers(tools_1.BestSellersSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/price-history', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.getPriceHistory(tools_1.PriceHistorySchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/product-finder', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.findProducts(tools_1.ProductFinderSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/category-analysis', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.analyzeCategory(tools_1.CategoryAnalysisSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/sales-velocity', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.analyzeSalesVelocity(tools_1.SalesVelocitySchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/inventory-analysis', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.analyzeInventory(tools_1.InventoryAnalysisSchema.parse(params));
    res.json({ result });
}));
app.post('/api/keepa/token-status', asyncHandler(async (req, res) => {
    const { apiKey, ...params } = req.body;
    if (!apiKey) {
        return res.status(400).json({ error: 'apiKey is required in request body' });
    }
    const keepaClient = new keepa_client_1.KeepaClient({ apiKey });
    const keepaTools = new tools_1.KeepaTools(keepaClient);
    const result = await keepaTools.getTokenStatus(tools_1.TokenStatusSchema.parse(params));
    res.json({ result });
}));
// Keepa webhook endpoint for notifications
app.post('/api/keepa/webhook', asyncHandler(async (req, res) => {
    const notification = req.body;
    console.log('ðŸ“© Received Keepa webhook notification:', {
        timestamp: new Date().toISOString(),
        type: notification.notificationType || 'unknown',
        payload: notification
    });
    // Process different types of notifications
    switch (notification.notificationType) {
        case 'PRODUCT_PRICE_CHANGE':
            console.log('ï¿½ï¿½ Price change notification for ASIN:', notification.asin);
            break;
        case 'PRODUCT_AVAILABILITY_CHANGE':
            console.log('ðŸ“¦ Availability change notification for ASIN:', notification.asin);
            break;
        case 'DEAL_NOTIFICATION':
            console.log('ðŸŽ¯ Deal notification:', notification);
            break;
        default:
            console.log('ðŸ“¨ Generic notification:', notification);
    }
    // Respond with 200 OK to acknowledge receipt
    res.status(200).json({
        status: 'received',
        timestamp: new Date().toISOString(),
        message: 'Webhook notification processed successfully'
    });
}));
// Webhook verification endpoint (for Keepa to verify the endpoint)
app.get('/api/keepa/webhook', (req, res) => {
    res.json({
        status: 'active',
        endpoint: 'Keepa webhook endpoint',
        timestamp: new Date().toISOString(),
        message: 'This endpoint is ready to receive Keepa notifications'
    });
});
// Error handling middleware
app.use((error, req, res, next) => {
    console.error('Error:', error);
    const statusCode = error.statusCode || 500;
    const message = error.message || 'Internal server error';
    res.status(statusCode).json({
        error: message,
        timestamp: new Date().toISOString()
    });
});
// 404 handler
app.use((req, res) => {
    res.status(404).json({
        error: 'Not found',
        path: req.path,
        timestamp: new Date().toISOString()
    });
});
const PORT = process.env.PORT || 3000;
if (require.main === module) {
    app.listen(PORT, () => {
        console.log(`Keepa Express server running on port ${PORT}`);
        console.log(`Health check: http://localhost:${PORT}/health`);
        console.log('Available endpoints:');
        console.log('  POST /api/keepa/product-lookup');
        console.log('  POST /api/keepa/batch-product-lookup');
        console.log('  POST /api/keepa/search-deals');
        console.log('  POST /api/keepa/seller-lookup');
        console.log('  POST /api/keepa/best-sellers');
        console.log('  POST /api/keepa/price-history');
        console.log('  POST /api/keepa/product-finder');
        console.log('  POST /api/keepa/category-analysis');
        console.log('  POST /api/keepa/sales-velocity');
        console.log('  POST /api/keepa/inventory-analysis');
        console.log('  POST /api/keepa/token-status');
        console.log('  POST /api/keepa/webhook (for Keepa notifications)');
        console.log('  GET  /api/keepa/webhook (webhook verification)');
        console.log('');
        console.log('Note: All endpoints require "apiKey" in the request body');
    });
}
exports.default = app;
//# sourceMappingURL=data:application/json;base64,