"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../src/types");
describe('Types and Enums', () => {
    describe('KeepaDomain', () => {
        it('should have correct domain values', () => {
            expect(types_1.KeepaDomain.US).toBe(1);
            expect(types_1.KeepaDomain.UK).toBe(2);
            expect(types_1.KeepaDomain.DE).toBe(3);
            expect(types_1.KeepaDomain.FR).toBe(4);
            expect(types_1.KeepaDomain.JP).toBe(5);
            expect(types_1.KeepaDomain.CA).toBe(6);
            expect(types_1.KeepaDomain.CN).toBe(7);
            expect(types_1.KeepaDomain.IT).toBe(8);
            expect(types_1.KeepaDomain.ES).toBe(9);
            expect(types_1.KeepaDomain.IN).toBe(10);
            expect(types_1.KeepaDomain.MX).toBe(11);
        });
    });
    describe('KeepaDataType', () => {
        it('should have COUNT_NEW at correct index', () => {
            // This is critical for our seller count functionality
            expect(types_1.KeepaDataType.COUNT_NEW).toBe(11);
        });
        it('should have other important data types', () => {
            expect(types_1.KeepaDataType.AMAZON).toBe(0);
            expect(types_1.KeepaDataType.NEW).toBe(1);
            expect(types_1.KeepaDataType.USED).toBe(2);
            expect(types_1.KeepaDataType.SALES_RANK).toBe(3);
            expect(types_1.KeepaDataType.RATING).toBe(16);
        });
    });
    describe('VERIFIED_AMAZON_CATEGORIES', () => {
        it('should contain verified categories', () => {
            expect(types_1.VERIFIED_AMAZON_CATEGORIES['Electronics']).toBe(172282);
            expect(types_1.VERIFIED_AMAZON_CATEGORIES['Books']).toBe(283155);
            expect(types_1.VERIFIED_AMAZON_CATEGORIES['Clothing, Shoes & Jewelry']).toBe(7141123011);
        });
        it('should have Industrial & Scientific category used in tests', () => {
            expect(types_1.VERIFIED_AMAZON_CATEGORIES['Industrial & Scientific']).toBe(16310091);
        });
        it('should not contain undefined categories', () => {
            expect(Object.values(types_1.VERIFIED_AMAZON_CATEGORIES)).not.toContain(undefined);
            expect(Object.values(types_1.VERIFIED_AMAZON_CATEGORIES)).not.toContain(null);
        });
        it('should have all category IDs as numbers', () => {
            Object.values(types_1.VERIFIED_AMAZON_CATEGORIES).forEach(categoryId => {
                expect(typeof categoryId).toBe('number');
                expect(categoryId).toBeGreaterThan(0);
            });
        });
    });
    describe('getCategoryName', () => {
        it('should return correct category name for valid ID', () => {
            expect((0, types_1.getCategoryName)(172282)).toBe('Electronics');
            expect((0, types_1.getCategoryName)(283155)).toBe('Books');
            expect((0, types_1.getCategoryName)(16310091)).toBe('Industrial & Scientific');
        });
        it('should return undefined for invalid category ID', () => {
            expect((0, types_1.getCategoryName)(999999999)).toBeUndefined();
            expect((0, types_1.getCategoryName)(-1)).toBeUndefined();
            expect((0, types_1.getCategoryName)(0)).toBeUndefined();
        });
        it('should handle edge cases', () => {
            expect((0, types_1.getCategoryName)(null)).toBeUndefined();
            expect((0, types_1.getCategoryName)(undefined)).toBeUndefined();
            expect((0, types_1.getCategoryName)('string')).toBeUndefined();
        });
    });
    describe('Category Validation', () => {
        it('should have consistent category mappings', () => {
            // Test that forward and reverse lookups are consistent
            Object.entries(types_1.VERIFIED_AMAZON_CATEGORIES).forEach(([name, id]) => {
                expect((0, types_1.getCategoryName)(id)).toBe(name);
            });
        });
        it('should not have duplicate category IDs', () => {
            const categoryIds = Object.values(types_1.VERIFIED_AMAZON_CATEGORIES);
            const uniqueIds = new Set(categoryIds);
            expect(uniqueIds.size).toBe(categoryIds.length);
        });
        it('should have reasonable category ID ranges', () => {
            // Amazon category IDs should be positive integers
            Object.values(types_1.VERIFIED_AMAZON_CATEGORIES).forEach(categoryId => {
                expect(Number.isInteger(categoryId)).toBe(true);
                expect(categoryId).toBeGreaterThan(0);
                expect(categoryId).toBeLessThan(99999999999); // Reasonable upper bound
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,